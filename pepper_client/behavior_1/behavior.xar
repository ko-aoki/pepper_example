<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Httplib" id="2" localization="8" tooltip="Webアクセスサンプル" x="390" y="198">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):

    cnt= 0

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        import qi

        try:
            self.logger.info("------- 1 -------")
            self.timer = qi.PeriodicTask()
            self.timer.setCallback(self.monitorState)
            self.timer.stop()
            self.timer.setUsPeriod(1000 * 1000 * 5)
            self.timer.start(False)
            self.logger.info("------- 2 -------")

        except Exception as e:
            self.logger.info(str(e))
            self.onFailed(str(e))

    def onInput_onStop(self):

        self.timer.stop()
        #onStopに入力があった時に呼ばれます。
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onInput_onStart()

    def monitorState(self):
        import urllib2, json

        self.cnt = self.cnt +1
        if self.cnt %2 == 0:
            self.logger.info("なにもしない")
            return
        else:
            self.logger.info("後続")


        timeout = int(self.getParameter("Timeout"))
        url = self.getParameter("Url")
        r = urllib2.urlopen(url, None, timeout)
        try:
            root = json.loads(r.read())
            self.logger.info(root)
            dump = json.dumps(root['message'], ensure_ascii=False)
            message = dump.encode('utf-8')
            self.logger.info(message)
            self.onStopped(message)

            self.timer.stop()
            self.onUnload(self)
        except Exception as e:
            self.logger.info(str(e))
            self.onFailed(str(e))
        finally:
            r.close()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="" id="3" />
                            <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="4" />
                            <Output name="onFailed" type="3" type_size="1" nature="2" inner="0" tooltip="" id="5" />
                            <Parameter name="Timeout" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="3600" tooltip="" id="6" />
                            <Parameter name="Url" inherits_from_parent="0" content_type="3" value="http://localhost:8080/pepper/api/example" default_value="" custom_choice="0" tooltip="" id="7" />
                        </Box>
                        <Box name="Websocket" id="1" localization="8" tooltip="Webアクセスサンプル" x="270" y="478">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):

    def ws_on_message(ws, message):
        self.logger.info("---------on_message---------" + message)
        print message

    def ws_on_error(ws, error):
        self.logger.info("---------on_error---------")
        print error

    def ws_on_close(ws):
        print "### closed ###"

    def ws_on_open(ws):
        self.logger.info("---------on_open---------")
        def run(*args):
            ws.send("test")
            self.logger.info("---------on_open_run---------")
            while(True):
                self.logger.info("--------- recv:" + ws.recv() + "-----------")

        thread.start_new_thread(run, ())


    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # ALFrameManagerの取得
        self.framemanager = ALProxy("ALFrameManager")
        # 初期化
        self.folderName = None

    def onUnload(self):
        import sys
        # 初期化
        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None

    def onInput_onStart(self):
        import sys, os, thread, time, json

        # 用意したライブラリまでのパスを取得
        self.folderName = os.path.join(
                    self.framemanager.getBehaviorPath(self.behaviorId), "lib")

        # ライブラリをインポート可能にするために、取得したパスを追加
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

        # ライブラリ読み込み
        import websocket

        #put initialization code here
        websocket.enableTrace(True)
        ws = websocket.WebSocketApp("ws://localhost:8080/pepper/endpoint",
#        ws = websocket.WebSocketApp("ws://localhost:8080/pepper/topic/stateChanged",
                              on_message = self.ws_on_message,
                              on_error = self.ws_on_error,
                              on_close = self.ws_on_close)

        self.logger.info("--------- 1 ---------")

        ws.on_open = self.ws_on_open

        self.logger.info("--------- 2 ---------")

        ws.run_forever()

        self.logger.info("--------- 3 ---------")]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="3" />
                            <Output name="onFailed" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Parameter name="Timeout" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="3600" tooltip="" id="5" />
                            <Parameter name="Url" inherits_from_parent="0" content_type="3" value="http://localhost:8080/pepper/api/example" default_value="" custom_choice="0" tooltip="" id="6" />
                        </Box>
                        <Box name="StompClient" id="3" localization="8" tooltip="Webアクセスサンプル" x="230" y="326">
                            <bitmap>media/images/box/box-python-script.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # ALFrameManagerの取得
        self.framemanager = ALProxy("ALFrameManager")
        # 初期化
        self.folderName = None

    def onUnload(self):
        import sys
        # 初期化
        if self.folderName and self.folderName in sys.path:
            sys.path.remove(self.folderName)
        self.folderName = None

    def onInput_onStart(self):
        import sys, os

        # 用意したライブラリまでのパスを取得
        self.folderName = os.path.join(
                    self.framemanager.getBehaviorPath(self.behaviorId), "lib")

        # ライブラリをインポート可能にするために、取得したパスを追加
        if self.folderName not in sys.path:
            sys.path.append(self.folderName)

        # ライブラリ読み込み
        import stomp

        class MyListener(stomp.ConnectionListener):
            def ws_on_message(self, headers, message):
                self.logger.info("---------on_message---------" + message)
                print message

            def ws_on_error(self, headers, message):
                self.logger.info("---------on_error---------")
                print error

        self.logger.info("--------- 1 ---------")
        conn = stomp.Connection([('localhost',8080)])
#        conn.set_listener('ws://localhost:8080/pepper/endpoint', MyListener())
        conn.set_listener('pepper/endpoint', MyListener())
        self.logger.info("--------- 2 ---------")
        conn.start()
        self.logger.info("--------- 3 ---------")
#        conn.connect('', '', wait=True)
        conn.connect()

        self.logger.info("--------- 4 ---------")
        conn.subscribe(destination='ws://localhost:8080/pepper/topic/stateChanged', id=1, ack='auto')
        self.logger.info("--------- 5 ---------")]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="ボックス動作の終了時に信号を送る。" id="3" />
                            <Output name="onFailed" type="3" type_size="1" nature="2" inner="0" tooltip="" id="4" />
                            <Parameter name="Timeout" inherits_from_parent="0" content_type="1" value="30" default_value="30" min="0" max="3600" tooltip="" id="5" />
                            <Parameter name="Url" inherits_from_parent="0" content_type="3" value="http://localhost:8080/pepper/api/example" default_value="" custom_choice="0" tooltip="" id="6" />
                        </Box>
                        <Box name="Say Text (1)" id="6" localization="8" tooltip="Say the text received on its input." x="769" y="122">
                            <bitmap>media/images/box/interaction/say.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                            <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                            <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                            <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                            <Resource name="Speech" type="Lock" timeout="0" />
                        </Box>
                        <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="6" indexofinput="2" outputowner="2" indexofoutput="4" />
                        <Link inputowner="2" indexofinput="3" outputowner="6" indexofoutput="4" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
